{"name": "test_welcome_1_user_policy[user_or_policy_data0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: 'GET /screenshot' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details", "trace": "self = <PageObjects.WelcomePage.welcome_page.WelcomePage object at 0x00000272D9638FA0>, locator = ('accessibility id', '《用户协议》'), times = 10, poll_frequency = 0.5\ndoc = '引导页_查看用户协议'\n\n    def wait_ele_Visible(self, locator, times=10, poll_frequency=0.5, doc=''):\n        \"\"\"\n        :param locator: (元素定位方式,元素定位表达式)\n        :param times: 元素等待时间\n        :param poll_frequency: 元素等待循环周期\n        :param doc: 模块名_页面名称_操作名称（截图名称）\n        :return: None\n        \"\"\"\n        my_logger.info(\"{0}等待元素{1}可见\".format(doc, locator))\n        try:\n            # 开始等待时间\n            start = datetime.now()\n>           WebDriverWait(self.driver, times, poll_frequency).until(EC.visibility_of_element_located(locator))\n\nCommon\\base_page.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c3fc7275-a3c5-4145-a9b8-9e1042368b73\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x00000272D96DD9D0>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\nd:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x00000272D96DD9D0>\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"c3fc7275-a3c5-4145-a9b8-9e1042368b73\")>\n\n    def __call__(self, driver):\n        try:\n>           return _element_if_visible(_find_element(driver, self.locator))\n\nd:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"c3fc7275-a3c5-4145-a9b8-9e1042368b73\")>, by = ('accessibility id', '《用户协议》')\n\n    def _find_element(driver, by):\n        \"\"\"Looks up an element. Logs and re-raises ``WebDriverException``\n        if thrown.\"\"\"\n        try:\n            return driver.find_element(*by)\n        except NoSuchElementException as e:\n            raise e\n        except WebDriverException as e:\n>           raise e\n\nd:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"c3fc7275-a3c5-4145-a9b8-9e1042368b73\")>, by = ('accessibility id', '《用户协议》')\n\n    def _find_element(driver, by):\n        \"\"\"Looks up an element. Logs and re-raises ``WebDriverException``\n        if thrown.\"\"\"\n        try:\n>           return driver.find_element(*by)\n\nd:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:411: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"c3fc7275-a3c5-4145-a9b8-9e1042368b73\")>, by = 'accessibility id', value = '《用户协议》'\n\n    def find_element(self, by: str = By.ID, value: Union[str, Dict] = None) -> MobileWebElement:\n        \"\"\"'Private' method used by the find_element_by_* methods.\n    \n        Override for Appium\n    \n        Usage:\n            Use the corresponding find_element_by_* instead of this.\n    \n        Returns:\n            `appium.webdriver.webelement.WebElement`: The found element\n    \n        \"\"\"\n        # TODO: If we need, we should enable below converter for Web context\n        # if self.w3c:\n        #     if by == By.ID:\n        #         by = By.CSS_SELECTOR\n        #         value = '[id=\"%s\"]' % value\n        #     elif by == By.TAG_NAME:\n        #         by = By.CSS_SELECTOR\n        #     elif by == By.CLASS_NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = \".%s\" % value\n        #     elif by == By.NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = '[name=\"%s\"]' % value\n    \n>       return self.execute(RemoteCommand.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\nd:\\python\\python38\\lib\\site-packages\\appium\\webdriver\\webdriver.py:279: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"c3fc7275-a3c5-4145-a9b8-9e1042368b73\")>, driver_command = 'findElement'\nparams = {'using': 'accessibility id', 'value': '《用户协议》'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nd:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x00000272D8CB5700>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...\\lib\\\\\\\\jsonwp-proxy\\\\\\\\proxy.js:274:13)\\\\n    at processTicksAndRejections (internal/process/task_queues.js:85:5)\"}}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n            super().check_response(response)\n        except WebDriverException as wde:\n            if wde.msg == 'No such context found.':\n                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde\n            else:\n>               raise wde\n\nd:\\python\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x00000272D8CB5700>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...\\lib\\\\\\\\jsonwp-proxy\\\\\\\\proxy.js:274:13)\\\\n    at processTicksAndRejections (internal/process/task_queues.js:85:5)\"}}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n>           super().check_response(response)\n\nd:\\python\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x00000272D8CB5700>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...\\lib\\\\\\\\jsonwp-proxy\\\\\\\\proxy.js:274:13)\\\\n    at processTicksAndRejections (internal/process/task_queues.js:85:5)\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: 'POST /element' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details\n\nd:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCases.Test0Welcome.test_welcome.Test0Welcome object at 0x00000272D8C94CA0>\nstart_class_App = (<appium.webdriver.webdriver.WebDriver (session=\"c3fc7275-a3c5-4145-a9b8-9e1042368b73\")>, <PageObjects.WelcomePage.welcome_page.WelcomePage object at 0x00000272D8BA5D30>)\nuser_or_policy_data = {'check': '服务条款', 'click': '用户协议', 'title': '查看用户协议'}\n\n    @pytest.mark.parametrize(\"user_or_policy_data\", WD.user_or_policy_data)\n    # @pytest.mark.usefixtures(\"start_class_App\")  # 在运行的时候，会去运行start_class_App函数\n    @pytest.mark.demo3\n    def test_welcome_1_user_policy(self, start_class_App, user_or_policy_data):\n        my_log.info(\"****正常用例——{}****\".format(user_or_policy_data['title']))\n        driver = start_class_App[0]\n        wel = WelcomePage(driver)\n        sleep(3)\n>       res = wel.show_privacy_user_agreement_or_policy(user_or_policy_data['click'])\n\nTestCases\\Test0Welcome\\test_welcome.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPageObjects\\WelcomePage\\welcome_page.py:44: in show_privacy_user_agreement_or_policy\n    self.wait_ele_Visible(locator=loc.privacy_user_agreement_btn, doc=doc)\nCommon\\base_page.py:44: in wait_ele_Visible\n    self.save_screenshot(doc)\nCommon\\base_page.py:278: in save_screenshot\n    self.driver.save_screenshot(file_name)\nd:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1055: in save_screenshot\n    return self.get_screenshot_as_file(filename)\nd:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1032: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\nd:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1064: in get_screenshot_as_png\n    return base64.b64decode(self.get_screenshot_as_base64().encode('ascii'))\nd:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1074: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\nd:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\nd:\\python\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:31: in check_response\n    raise wde\nd:\\python\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: in check_response\n    super().check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x00000272D8CB5700>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...\\lib\\\\\\\\jsonwp-proxy\\\\\\\\proxy.js:274:13)\\\\n    at processTicksAndRejections (internal/process/task_queues.js:85:5)\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: 'GET /screenshot' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details\n\nd:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: WebDriverException"}, "steps": [{"name": "step1：等待《用户协议》按钮可见", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: 'GET /screenshot' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details\n\n", "trace": "  File \"D:\\JetBrains\\PyCharm\\PycharmProjects\\Duixi_Framework_V1\\PageObjects\\WelcomePage\\welcome_page.py\", line 44, in show_privacy_user_agreement_or_policy\n    self.wait_ele_Visible(locator=loc.privacy_user_agreement_btn, doc=doc)\n  File \"D:\\JetBrains\\PyCharm\\PycharmProjects\\Duixi_Framework_V1\\Common\\base_page.py\", line 44, in wait_ele_Visible\n    self.save_screenshot(doc)\n  File \"D:\\JetBrains\\PyCharm\\PycharmProjects\\Duixi_Framework_V1\\Common\\base_page.py\", line 278, in save_screenshot\n    self.driver.save_screenshot(file_name)\n  File \"d:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1055, in save_screenshot\n    return self.get_screenshot_as_file(filename)\n  File \"d:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1032, in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n  File \"d:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1064, in get_screenshot_as_png\n    return base64.b64decode(self.get_screenshot_as_base64().encode('ascii'))\n  File \"d:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1074, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\n  File \"d:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"d:\\python\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 31, in check_response\n    raise wde\n  File \"d:\\python\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 26, in check_response\n    super().check_response(response)\n  File \"d:\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1649259995986, "stop": 1649259996029}, {"name": "添加失败截图...", "status": "passed", "attachments": [{"name": "失败截图", "source": "baa4fb07-5a7c-4606-a769-a83167e87292-attachment.png", "type": "image/png"}], "start": 1649259996181, "stop": 1649259996921}], "attachments": [{"name": "log", "source": "4179b677-85ac-4fa1-bdd5-583f4ce1416f-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "user_or_policy_data", "value": "{'click': '用户协议', 'check': '服务条款', 'title': '查看用户协议'}"}], "start": 1649259992982, "stop": 1649259996033, "uuid": "50574fc7-5fdc-424a-a78f-6c326dc69b08", "historyId": "e9dae882fbdb90dae8446445b50c8e8f", "testCaseId": "6c56f604827851ed250388e1566ccc43", "fullName": "TestCases.Test0Welcome.test_welcome.Test0Welcome#test_welcome_1_user_policy", "labels": [{"name": "tag", "value": "demo3"}, {"name": "tag", "value": "@pytest.mark.usefixtures('start_function_App')"}, {"name": "parentSuite", "value": "TestCases.Test0Welcome"}, {"name": "suite", "value": "test_welcome"}, {"name": "subSuite", "value": "Test0Welcome"}, {"name": "host", "value": "DESKTOP-KL6VQQI"}, {"name": "thread", "value": "13380-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.Test0Welcome.test_welcome"}]}